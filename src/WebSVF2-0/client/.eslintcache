[{"/home/prash/Desktop/WebSVF/src/WebSVF2-0/client/src/index.js":"1","/home/prash/Desktop/WebSVF/src/WebSVF2-0/client/src/App.js":"2","/home/prash/Desktop/WebSVF/src/WebSVF2-0/client/src/CodeFiles/index.js":"3","/home/prash/Desktop/WebSVF/src/WebSVF2-0/client/src/api/websvf.js":"4","/home/prash/Desktop/WebSVF/src/WebSVF2-0/client/src/RenderSVG/RenderSVG.js":"5","/home/prash/Desktop/WebSVF/src/WebSVF2-0/client/src/CodeFiles/Components/AddFile.js":"6","/home/prash/Desktop/WebSVF/src/WebSVF2-0/client/src/CodeFiles/Components/FileList.js":"7","/home/prash/Desktop/WebSVF/src/WebSVF2-0/client/src/Editor/Components/Editor.js":"8"},{"size":168,"mtime":1613907931452,"results":"9","hashOfConfig":"10"},{"size":5628,"mtime":1613907931452,"results":"11","hashOfConfig":"10"},{"size":5716,"mtime":1613907931452,"results":"12","hashOfConfig":"10"},{"size":99,"mtime":1613907931452,"results":"13","hashOfConfig":"10"},{"size":2138,"mtime":1613907931452,"results":"14","hashOfConfig":"10"},{"size":1701,"mtime":1613907931452,"results":"15","hashOfConfig":"10"},{"size":2692,"mtime":1613907931452,"results":"16","hashOfConfig":"10"},{"size":764,"mtime":1613907931452,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"nmx7x1",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/prash/Desktop/WebSVF/src/WebSVF2-0/client/src/index.js",[],"/home/prash/Desktop/WebSVF/src/WebSVF2-0/client/src/App.js",["38"],"import React, { useState } from \"react\";\nimport \"./App.css\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Box from \"@material-ui/core/Box\";\nimport { Grid, Typography, Paper, Button } from \"@material-ui/core\";\nimport Dialog from \"@material-ui/core/Dialog\";\n\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nimport CodeFiles from \"./CodeFiles/index\";\nimport { Toolbar } from \"@material-ui/core\";\n\nimport websvf from \"./api/websvf\";\n\n\nimport RenderSVG from \"./RenderSVG/RenderSVG\";\n\nfunction App() {\n  const [code, setCode] = useState(`//write your C code here`);\n  const [output, setOutput] = useState(\"\");\n  const [markers, setMarkers] = useState([]);\n  const [annotation, setAnnotation] = useState([]);\n  const [graphDialog, setGraphDialog] = useState(false);\n  const [graphDialogTitle, setGraphDialogTitle] = useState(\"\");\n\n  const handleGraphDialog = () => {\n    //setGraphDialogTitle(e.target.value);\n    setGraphDialog(true);\n  };\n\n  const handleSelection = (e) => {\n    let selected = e.target.value;\n    // setGraphDialogTitle(selected);\n    if (selected === \"CallGraph\") {\n      genCallGraph(selected);\n    } else if (selected === \"ICFG\") {\n      genICFG(selected);\n    } else if (selected === \"PAG\") {\n      genPAG(selected);\n    } else if (selected === \"SVFG\") {\n      genSVFG(selected);\n    } else if (selected === \"VFG\") {\n      genVFG(selected);\n    }\n    console.log(selected);\n  };\n  const genCallGraph = async (selected) => {\n    const response = await websvf.post(\"/analysis/callGraph\", {\n      code: code,\n      fileName: \"example\",\n    });\n    if (response) {\n      setMarkers([]);\n      setAnnotation([]);\n      setGraphDialogTitle(selected);\n      setOutput(response.data);\n    }\n  };\n\n  const genICFG = async (selected) => {\n    const response = await websvf.post(\"/analysis/icfg\", {\n      code: code,\n      fileName: \"example\",\n    });\n    if (response) {\n      setMarkers([]);\n      setAnnotation([]);\n      setGraphDialogTitle(selected);\n      setOutput(response.data);\n    }\n  };\n\n  const genSVFG = async (selected) => {\n    const response = await websvf.post(\"/analysis/svfg\", {\n      code: code,\n      fileName: \"example\",\n    });\n    if (response) {\n      setMarkers([]);\n      setAnnotation([]);\n      setGraphDialogTitle(selected);\n      setOutput(response.data);\n    }\n  };\n\n  const genVFG = async (selected) => {\n    const response = await websvf.post(\"/analysis/vfg\", {\n      code: code,\n      fileName: \"example\",\n    });\n    if (response) {\n      setMarkers([]);\n      setAnnotation([]);\n      setGraphDialogTitle(selected);\n      setOutput(response.data);\n    }\n  };\n  const genPAG = async (selected) => {\n    const response = await websvf.post(\"/analysis/pag\", {\n      code: code,\n      fileName: \"example\",\n    });\n    if (response) {\n      setMarkers([]);\n      setAnnotation([]);\n      setGraphDialogTitle(selected);\n      setOutput(response.data);\n    }\n  };\n  const updateMarker = (newValue) => {\n    console.log(newValue);\n    setMarkers(newValue);\n  };\n  const updateAnnotation = (newValue) => {\n    console.log(newValue);\n    setAnnotation(newValue);\n  };\n\n  const closeGraphDialog = () => {\n    setGraphDialog(false);\n    setGraphDialogTitle(\"\");\n  };\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\" color=\"primary\">\n        <Toolbar>\n          <Typography variant=\"h4\">WEBSVF</Typography>\n        </Toolbar>\n      </AppBar>\n      <Grid container justify=\"center\" alignItems=\"center\" direction=\"column\">\n        <Grid item>\n          <Box my={3}>\n            {console.log(markers)}\n            <CodeFiles\n              code={code}\n              setCode={setCode}\n              markers={markers}\n              annotation={annotation}\n            />\n          </Box>\n        </Grid>\n        <Grid container justify=\"center\" alignItems=\"center\" direction=\"column\">\n          <Grid>\n            <Button onClick={() => {}}>Bug Report</Button>\n            <Button onClick={handleGraphDialog}>Graphs</Button>\n          </Grid>\n          <Grid\n            container\n            justify=\"center\"\n            alignItems=\"center\"\n            direction=\"column\"\n          ></Grid>\n        </Grid>\n      </Grid>\n      <Dialog maxWidth open={graphDialog} onClose={closeGraphDialog}>\n        <DialogTitle>{graphDialogTitle}</DialogTitle>\n        <DialogContent>\n          <Grid\n            container\n            justify=\"center\"\n            alignItems=\"center\"\n            direction=\"column\"\n          >\n            <TextField\n              select\n              label=\"Graph\"\n              value={graphDialogTitle}\n              onChange={handleSelection}\n              helperText=\"Select Graph to be displayed\"\n            >\n              <MenuItem value=\"CallGraph\">CallGraph</MenuItem>\n              <MenuItem value=\"ICFG\">ICFG</MenuItem>\n              <MenuItem value=\"PAG\">PAG</MenuItem>\n              <MenuItem value=\"SVFG\">SVFG</MenuItem>\n              <MenuItem value=\"VFG\">VFG</MenuItem>\n            </TextField>\n          </Grid>\n\n          {graphDialogTitle === \"\" ? (\n            <Box p={5}>\n              <h1>No Graph Selected</h1>\n            </Box>\n          ) : (\n            <RenderSVG\n              output={output}\n              code={code}\n              markers={markers}\n              updateMarker={updateMarker}\n              updateAnnotation={updateAnnotation}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default App;\n","/home/prash/Desktop/WebSVF/src/WebSVF2-0/client/src/CodeFiles/index.js",["39","40","41","42"],"import React, { useState, useEffect } from \"react\";\nimport { Paper, Grid, Box } from \"@material-ui/core\";\n\nimport AddFile from \"./Components/AddFile\";\nimport FileList from \"./Components/FileList\";\nimport Editor from \"../Editor/Components/Editor\";\n\nimport websvf from \"../api/websvf\";\n\nimport prettyFormat from \"pretty-format\";\n\nimport \"./codefiles.css\";\n\nconst CodeFiles = ({ code, setCode, markers,annotation }) => {\n  const [response, setResponse] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n  const [dialogBox, setDialogBox] = useState(false);\n  //const [code, setCode] = useState(`//write your C code here`);\n  const [project, setProject] = useState([]);\n\n  const [userCode, setUserCode] = useState([\n    {\n      fileID: \"init-temp\",\n      fileName: \"example.c\",\n      version: \"0.0\",\n      content: `#include <math.h>\n      #include <stdio.h>\n      int main() {\n          double a, b, c, discriminant, root1, root2, realPart, imagPart;\n          printf(\"Enter coefficients a, b and c: \");\n          scanf(\"%lf %lf %lf\", &a, &b, &c);\n          discriminant = b * b - 4 * a * c;\n          // condition for real and different roots\n          if (discriminant > 0) {\n              root1 = (-b + sqrt(discriminant)) / (2 * a);\n              root2 = (-b - sqrt(discriminant)) / (2 * a);\n              printf(\"root1 = %.2lf and root2 = %.2lf\", root1, root2);\n          }\n          // condition for real and equal roots\n          else if (discriminant == 0) {\n              root1 = root2 = -b / (2 * a);\n              printf(\"root1 = root2 = %.2lf;\", root1);\n          }\n          // if roots are not real\n          else {\n              realPart = -b / (2 * a);\n              imagPart = sqrt(-discriminant) / (2 * a);\n              printf(\"root1 = %.2lf+%.2lfi and root2 = %.2f-%.2fi\", realPart, imagPart, realPart, imagPart);\n          }\n          return 0;\n      } `,\n      files: [],\n    },\n  ]);\n  const [selectedFile, setselectedFile] = useState(userCode[0].fileName);\n\n  useEffect(() => {\n    const elementIndex = userCode.findIndex((value) => {\n      return value.fileName === selectedFile;\n    });\n    setCode(userCode[elementIndex].content);\n  }, [selectedFile, userCode]);\n\n  const loadProject = async () => {\n    const response = await websvf.get(\"/db/getFiles/\");\n    if (response) {\n      setProject(response.data.projects[0]);\n      setUserCode(response.data.projects[0].userCode);\n    }\n  };\n\n  const handleAddFile = () => {\n    setUserCode([\n      ...userCode,\n      {\n        fileId: Math.random(),\n        fileName: fileName,\n        version: 0.1,\n        content: `//write your C code here`,\n      },\n    ]);\n\n    closeDialog();\n    clearFileName();\n  };\n  const handleFileName = (e) => {\n    setFileName(e.target.value);\n  };\n\n  const openDialog = () => {\n    setDialogBox(true);\n  };\n\n  const closeDialog = () => {\n    setDialogBox(false);\n    clearFileName();\n  };\n\n  const updateSelectedFile = (selectedFileName) => {\n    setselectedFile(selectedFileName);\n  };\n\n  const handleChange = (newValue) => {\n    setCode(newValue);\n\n    const elementIndex = userCode.findIndex((value) => {\n      return value.fileName === selectedFile;\n    });\n    let tempUserCode = [...userCode];\n\n    tempUserCode[elementIndex] = {\n      ...tempUserCode[elementIndex],\n      content: newValue,\n    };\n\n    setUserCode(tempUserCode);\n  };\n\n  const clearFileName = () => {\n    setFileName(\"\");\n  };\n\n  const codeSubmit = async () => {\n    const response = await websvf.post(\n      \"/db/saveFile/\",\n      //`code=${code}&fileName=${selectedFile}&fileVersion=${'1.0'}`,\n      {\n        code: code,\n        fileName: selectedFile,\n        fileVersion: \"1.0\",\n      }\n    );\n\n    setResponse(prettyFormat(response.data, { escapeString: false }));\n    (async function asyncWorkaround() {\n      await loadProject();\n    })();\n  };\n\n  return (\n    <div>\n      <Box>\n        <Grid container direction=\"row\">\n          <Grid item>\n            <Paper>\n              <Grid container direction=\"column\" justify=\"center\">\n                <AddFile\n                  handleAddFile={handleAddFile}\n                  handleFileName={handleFileName}\n                  clearFileName={clearFileName}\n                  fileName={fileName}\n                  userCode={userCode}\n                  openDialog={openDialog}\n                  closeDialog={closeDialog}\n                  dialogBox={dialogBox}\n                />\n                <FileList\n                  userCode={userCode}\n                  selectedFile={selectedFile}\n                  updateSelectedFile={updateSelectedFile}\n                />\n              </Grid>\n            </Paper>\n          </Grid>\n          <Grid item>\n            {userCode.map((data, index) => {\n              if (data.fileName === selectedFile) {\n                return (\n                  <Editor\n                    key={index}\n                    mode={\"c_cpp\"}\n                    name={\"main-editor\"}\n                    value={data.content}\n                    onChange={handleChange}\n                    markers={markers}\n                    annotation = {annotation}\n                  />\n                );\n              }\n              return \"\";\n            })}\n            {/* <Editor value={code} onChange={handleChange} /> */}\n          </Grid>\n        </Grid>\n      </Box>\n      {/* <button onClick={codeSubmit}> Submit </button>\n      <h1>Response from the POST request:</h1>\n      <Editor\n        mode={\"json\"}\n        theme={\"terminal\"}\n        //onChange={onChange}\n        name={\"UNIQUE_ID_OF_DIV1\"}\n        editorProps={{ $blockScrolling: true }}\n        wrapEnabled={true}\n        value={response}\n      /> */}\n    </div>\n  );\n};\n\nexport default CodeFiles;\n","/home/prash/Desktop/WebSVF/src/WebSVF2-0/client/src/api/websvf.js",[],"/home/prash/Desktop/WebSVF/src/WebSVF2-0/client/src/RenderSVG/RenderSVG.js",["43","44","45","46","47","48","49"],"import React, { useEffect } from \"react\";\n//import ReactHtmlParser from \"react-html-parser\"; --> issues\nimport ReactHtmlParser from \"react-html-parser\";\n\nimport \"./rendersvg.css\";\n\nconst RenderSVG = (props) => {\n  function handleOnClick(e) {\n    var splitString = e.target.innerHTML.split(\" \");\n\n    let lineElementIndex = splitString.findIndex((value) => {\n      return value === \"ln:\";\n    });\n\n    let colElementIndex = splitString.findIndex((value) => {\n      return value === \"cl:\";\n    });\n\n    //ace editor line number starts from 0 although users can see it start from one in frontend\n    var lineNumber = splitString[lineElementIndex + 1] - 1;\n    var colNumber = splitString[colElementIndex + 1];\n    const markers = [\n      {\n        startRow: lineNumber,\n        endRow: lineNumber + 1,\n        type: \"text\",\n        className: \"test-marker\",\n      },\n    ];\n    const annotation = [\n      {\n        row: lineNumber,\n        column: 3,\n        text: e.target.innerHTML,\n        type: \"text\",\n      },\n    ];\n    props.updateMarker(markers);\n    props.updateAnnotation(annotation);\n  }\n\n  useEffect(() => {\n    if (document.querySelector(`#graph0`)) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(props.output, \"text/xml\");\n\n      let text = Array.from(xmlDoc.getElementsByTagName(\"g\"));\n\n      let filtered = text\n        .filter(\n          (value) =>\n            /\\{[\\s]+ln\\:[\\s]+[0-9]+[\\s]+cl\\:[\\s]+[0-9]+[\\s]+fl\\:[\\s]+[a-z]+\\.c[\\s]+\\}/.test(\n              value.innerHTML\n            ) ||\n            /\\{[\\s]+in[\\s]+line\\:[\\s]+[0-9]+[\\s]+file\\:[\\s]+[a-z]+\\.c[\\s]+\\}/.test(\n              value.innerHTML\n            )\n        )\n        .map((value) => {\n          return value.id;\n        });\n\n      filtered.forEach((value) => {\n        if (value !== \"graph0\") {\n          var test = document.getElementById(value);\n\n          document\n            .querySelector(`#${value}`)\n            .addEventListener(\"click\", handleOnClick);\n        }\n      });\n    }\n  });\n\n  return (\n    <div>{props.output ? ReactHtmlParser(props.output) : <div></div>}</div>\n  );\n};\n\nexport default RenderSVG;\n","/home/prash/Desktop/WebSVF/src/WebSVF2-0/client/src/CodeFiles/Components/AddFile.js",[],"/home/prash/Desktop/WebSVF/src/WebSVF2-0/client/src/CodeFiles/Components/FileList.js",["50"],"import React, { useState } from \"react\";\n\nimport {\n  Typography,\n  Grid,\n  List,\n  ListItemIcon,\n  ListItemText,\n  ListItem,\n} from \"@material-ui/core\";\n\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport FolderIcon from \"@material-ui/icons/Folder\";\n\nconst FileList = (props) => {\n  //const [selectedFile, setselectedFile] = useState(props.userCode[0].fileName);\n\n  return (\n    <React.Fragment>\n      <Grid container spacing={5} style={{ padding: \"15px\" }}>\n        <Grid item xs={12}>\n          <Typography variant='h6'>Project: abc</Typography>\n\n          <List>\n            {props.userCode.map((value, index) => {\n              return (\n                <React.Fragment key={index}>\n                  <ListItem\n                    button\n                    // onClick={props.updateSelectedFile}\n                    onClick={() => props.updateSelectedFile(value.fileName)}\n                    selected={props.selectedFile === value.fileName}\n                  >\n                    <ListItemIcon style={{ minWidth: \"20px\" }}>\n                      <FolderIcon style={{ fontSize: \"17px\" }} />\n                      <ArrowRightIcon style={{ fontSize: \"17px\" }} />\n                    </ListItemIcon>\n                    <ListItemText\n                      primary={value.fileName}\n                      style={{ margin: \"0\" }}\n                    />\n                  </ListItem>\n                  <List dense style={{ paddingLeft: \"20px\" }}>\n                    {props.userCode.map((value, index) => {\n                      return (\n                        <ListItem\n                          key={`${index}-${index}`}\n                          button\n                          // onClick={props.updateSelectedFile}\n                          onClick={() =>\n                            props.updateSelectedFile(value.fileName)\n                          }\n                          selected={props.selectedFile === value.fileName}\n                        >\n                          <ListItemIcon style={{ minWidth: \"20px\" }}>\n                            <InsertDriveFileIcon style={{ fontSize: \"15px\" }} />\n                          </ListItemIcon>\n                          <ListItemText\n                            primary={value.fileName}\n                            style={{ margin: \"0\" }}\n                          />\n                        </ListItem>\n                      );\n                    })}\n                  </List>\n                </React.Fragment>\n              );\n            })}\n          </List>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default FileList;\n","/home/prash/Desktop/WebSVF/src/WebSVF2-0/client/src/Editor/Components/Editor.js",[],{"ruleId":"51","severity":1,"message":"52","line":5,"column":28,"nodeType":"53","messageId":"54","endLine":5,"endColumn":33},{"ruleId":"51","severity":1,"message":"55","line":15,"column":10,"nodeType":"53","messageId":"54","endLine":15,"endColumn":18},{"ruleId":"51","severity":1,"message":"56","line":19,"column":10,"nodeType":"53","messageId":"54","endLine":19,"endColumn":17},{"ruleId":"57","severity":1,"message":"58","line":62,"column":6,"nodeType":"59","endLine":62,"endColumn":30,"suggestions":"60"},{"ruleId":"51","severity":1,"message":"61","line":123,"column":9,"nodeType":"53","messageId":"54","endLine":123,"endColumn":19},{"ruleId":"51","severity":1,"message":"62","line":21,"column":9,"nodeType":"53","messageId":"54","endLine":21,"endColumn":18},{"ruleId":"63","severity":1,"message":"64","line":52,"column":23,"nodeType":"65","messageId":"66","endLine":52,"endColumn":24,"suggestions":"67"},{"ruleId":"63","severity":1,"message":"64","line":52,"column":43,"nodeType":"65","messageId":"66","endLine":52,"endColumn":44,"suggestions":"68"},{"ruleId":"63","severity":1,"message":"64","line":52,"column":63,"nodeType":"65","messageId":"66","endLine":52,"endColumn":64,"suggestions":"69"},{"ruleId":"63","severity":1,"message":"64","line":55,"column":32,"nodeType":"65","messageId":"66","endLine":55,"endColumn":33,"suggestions":"70"},{"ruleId":"63","severity":1,"message":"64","line":55,"column":54,"nodeType":"65","messageId":"66","endLine":55,"endColumn":55,"suggestions":"71"},{"ruleId":"51","severity":1,"message":"72","line":65,"column":15,"nodeType":"53","messageId":"54","endLine":65,"endColumn":19},{"ruleId":"51","severity":1,"message":"73","line":1,"column":17,"nodeType":"53","messageId":"54","endLine":1,"endColumn":25},"no-unused-vars","'Paper' is defined but never used.","Identifier","unusedVar","'response' is assigned a value but never used.","'project' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setCode'. Either include it or remove the dependency array. If 'setCode' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["74"],"'codeSubmit' is assigned a value but never used.","'colNumber' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\:.","Literal","unnecessaryEscape",["75","76"],["77","78"],["79","80"],["81","82"],["83","84"],"'test' is assigned a value but never used.","'useState' is defined but never used.",{"desc":"85","fix":"86"},{"messageId":"87","fix":"88","desc":"89"},{"messageId":"90","fix":"91","desc":"92"},{"messageId":"87","fix":"93","desc":"89"},{"messageId":"90","fix":"94","desc":"92"},{"messageId":"87","fix":"95","desc":"89"},{"messageId":"90","fix":"96","desc":"92"},{"messageId":"87","fix":"97","desc":"89"},{"messageId":"90","fix":"98","desc":"92"},{"messageId":"87","fix":"99","desc":"89"},{"messageId":"90","fix":"100","desc":"92"},"Update the dependencies array to be: [selectedFile, setCode, userCode]",{"range":"101","text":"102"},"removeEscape",{"range":"103","text":"104"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"105","text":"106"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"107","text":"104"},{"range":"108","text":"106"},{"range":"109","text":"104"},{"range":"110","text":"106"},{"range":"111","text":"104"},{"range":"112","text":"106"},{"range":"113","text":"104"},{"range":"114","text":"106"},[2173,2197],"[selectedFile, setCode, userCode]",[1423,1424],"",[1423,1423],"\\",[1443,1444],[1443,1443],[1463,1464],[1463,1463],[1572,1573],[1572,1572],[1594,1595],[1594,1594]]